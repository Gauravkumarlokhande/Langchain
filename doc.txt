Decoder: Thedecoder is also composed of a stack of N = 6 identical layers. In addition to the two
 sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head
 attention over the output of the encoder stack. Similar to the encoder, we employ residual connections
 around each of the sub-layers, followed by layer normalization. We also modify the self-attention
 sub-layer in the decoder stack to prevent positions from attending to subsequent positions. This
 masking, combined with fact that the output embeddings are offset by one position, ensures that the
 predictions for position i can depend only on the known outputs at positions less than i.
  Where the projections are parameter matrices WQ
 i 
and WO Rhdv dmodel.
 Rdmodel dk, WK
 i
 Rdmodel dk, WV
 i 
Rdmodel dv \n\n
 In this work we employ h = 8 parallel attention layers, or heads. For each of these we use
 dk = dv =dmodel h = 64. Due to the reduced dimension of each head, the total computational cost
 is similar to that of single-head attention with full dimensionality.
 3.2.3 Applications of Attention in our Model
 The Transformer uses multi-head attention in three different ways:
 In "encoder-decoder attention" layers, the queries come from the previous decoder layer,
 and the memory keys and values come from the output of the encoder. This allows every
 position in the decoder to attend over all positions in the input sequence. This mimics the
 typical encoder-decoder attention mechanisms in sequence-to-sequence models such as
 [31, 2, 8].
 The encoder contains self-attention layers. In a self-attention layer all of the keys, values
 and queries come from the same place, in this case, the output of the previous layer in the
 encoder. Each position in the encoder can attend to all positions in the previous layer of the
 encoder.
 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to
 all positions in the decoder up to and including that position. We need to prevent leftward
 information flow in the decoder to preserve the auto-regressive property. We implement this
 inside of scaled dot-product attention by masking out (setting to 
) all values in the input
 of the softmax which correspond to illegal connections. See Figure 2.
 3.3 Position-wise Feed-Forward Networks
 In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully
 connected feed-forward network, which is applied to each position separately and identically. This
 consists of two linear transformations with a ReLU activation in between.
 FFN(x) = max(0xW1 +b1)W2 +b2
 (2) \n\n
 While the linear transformations are the same across different positions, they use different parameters
 from layer to layer. Another way of describing this is as two convolutions with kernel size 1.
 The dimensionality of input and output is dmodel = 512, and the inner-layer has dimensionality
 dff = 2048.
 3.4 Embeddings and Softmax
 Similarly to other sequence transduction models, we use learned embeddings to convert the input
 tokens and output tokens to vectors of dimension dmodel. We also use the usual learned linear transfor
mation and softmax function to convert the decoder output to predicted next-token probabilities. In
 our model, we share the same weight matrix between the two embedding layers and the pre-softmax
 linear transformation, similar to [24]. In the embedding layers, we multiply those weights by dmodel.
 3.5 Positional Encoding
 Since our model contains no recurrence and no convolution, in order for the model to make use of the
 order of the sequence, we must inject some information about the relative or absolute position of the
 tokens in the sequence. To this end, we add "positional encodings" to the input embeddings at the
 5\n\n
Table 1: Maximumpath lengths, per-layer complexity and minimum number of sequential operations
 for different layer types. n is the sequence length, d is the representation dimension, k is the kernel
 size of convolutions and r the size of the neighborhood in restricted self-attention.
 Layer Type
 Self-Attention
 Recurrent
 Convolutional
 Self-Attention (restricted)
 Complexity per Layer Sequential Maximum Path Length
 Operations
 O(n2 d)
 O(1)
 O(n d2)
 O(k n d2)
 O(r n d)
 O(n)
 O(1)
 O(1)
 O(1)
 O(n)
 O(logk(n))
 O(nr)\n\n
 bottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel
 as the embeddings, so that the two can be summed. There are many choices of positional encodings,
 learned and fixed [8].
 In this work, we use sine and cosine functions of different frequencies:
 PE(pos2i) = sin(pos 100002i dmodel)
 PE(pos2i+1) = cos(pos 100002i dmodel)
 where pos is the position and i is the dimension. That is, each dimension of the positional encoding
 corresponds to a sinusoid. The wavelengths form a geometric progression from 2 to 10000 2 . We
 chose this function because we hypothesized it would allow the model to easily learn to attend by
 relative positions, since for any fixed offset k, PEpos+k can be represented as a linear function of
 PEpos.
 Wealso experimented with using learned positional embeddings [8] instead, and found that the two
 versions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version
 because it may allow the model to extrapolate to sequence lengths longer than the ones encountered
 during training.
 4 WhySelf-Attention
 In this section we compare various aspects of self-attention layers to the recurrent and convolu
tional layers commonly used for mapping one variable-length sequence of symbol representations
 (x1
 xn) to another sequence of equal length (z1
 zn), with xi zi 
Rd, such as a hidden
 layer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we
 consider three desiderata.
 One is the total computational complexity per layer. Another is the amount of computation that can
 be parallelized, as measured by the minimum number of sequential operations required.
 The third is the path length between long-range dependencies in the network. Learning long-range
 dependencies is a key challenge in many sequence transduction tasks. One key factor affecting the
 ability to learn such dependencies is the length of the paths forward and backward signals have to
 traverse in the network. The shorter these paths between any combination of positions in the input
 and output sequences, the easier it is to learn long-range dependencies [11]. Hence we also compare
 the maximum path length between any two input and output positions in networks composed of the
 different layer types.\n\n
 Asnoted in Table 1, a self-attention layer connects all positions with a constant number of sequentially
 executed operations, whereas a recurrent layer requires O(n) sequential operations. In terms of
 computational complexity, self-attention layers are faster than recurrent layers when the sequence
 length n is smaller than the representation dimensionality d, which is most often the case with
 sentence representations used by state-of-the-art models in machine translations, such as word-piece
 [31] and byte-pair [25] representations. To improve computational performance for tasks involving
 very long sequences, self-attention could be restricted to considering only a neighborhood of size r
